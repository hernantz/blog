<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>what's the point</title><link href="/" rel="alternate"></link><link href="/feeds/all-en.atom.xml" rel="self"></link><id>/</id><updated>2013-11-09T12:03:00-03:00</updated><entry><title>An MVP is not a product, it's an MVP</title><link href="/an-mvp-is-not-a-product-its-an-mvp.html" rel="alternate"></link><updated>2013-11-09T12:03:00-03:00</updated><author><name>hernantz</name></author><id>tag:,2013-11-09:an-mvp-is-not-a-product-its-an-mvp.html</id><summary type="html">&lt;p&gt;Minimum Viable Product, or even better Minimum Viable Prototype (MVP from now on),
is a technique born in the Lean Startup movement to reduce the risk of gaining validated
learning, without spending too much effort, money and time in the wrong project direction.&lt;/p&gt;
&lt;p&gt;You build a MVP to validate an idea, be it for a brand new product or a new feature 
in an existing one. 
In this stage of the project you don't care about: tests, QA, copy-pasting code, 
mocking the UI, security, code reviews, maintainability, scalability, etc.&lt;/p&gt;
&lt;p&gt;In case this prototype is successfull, you should go and build the product or the feature to 
capitalize that validated learning, but this time, following industries best practices, 
so it can be used in production by your (paying?) users.&lt;/p&gt;
&lt;p&gt;This last step is crucial. There will be the tempatation of not taking it.
The consequences of not doing it are well known, that's why we have best practices afterall.
The risk is low now. Money, time and effort won't be wasted. There is no excuse. 
An MVP is not a product, it's an MVP.&lt;/p&gt;</summary><category term="startups"></category></entry><entry><title>If (you write ifs)</title><link href="/if-you-write-ifs.html" rel="alternate"></link><updated>2013-10-24T22:56:00-03:00</updated><author><name>hernantz</name></author><id>tag:,2013-10-24:if-you-write-ifs.html</id><summary type="html">&lt;p&gt;As a programmer, most of your time you will be writing ifs.
Not only becouse this is the main flow control structure, in c like languages,
but becouse writing an else is (or shoud be at least) a code smell. It's a trap. &lt;/p&gt;
&lt;h2&gt;Cut the flow ifs&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;None found&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;rather than&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;blah&lt;/span&gt;
        &lt;span class="n"&gt;blah&lt;/span&gt; 
        &lt;span class="n"&gt;blah&lt;/span&gt;
        &lt;span class="n"&gt;blah&lt;/span&gt; 
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_nested_if&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;blah&lt;/span&gt;
            &lt;span class="n"&gt;blah&lt;/span&gt; 
            &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;blah&lt;/span&gt;
            &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;blah&lt;/span&gt; 
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;None found&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If your programming language has curly braces, nesting ifs leads you to
the pyramid of doom.
Pyramid of doom picture here.
While in Python it looks more like a stairs of doom.
stair of doom in python picture
In functional languages, it pretty much always looks ugly.&lt;/p&gt;
&lt;h2&gt;Single check ifs&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;there&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;here&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;nearby&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;blah&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;if your are asking too many contions and of different kind, you are doing it 
wrong&lt;/p&gt;</summary><category term="personal"></category></entry><entry><title>In the beginning there was static HTML</title><link href="/in-the-beginning-there-was-static-html.html" rel="alternate"></link><updated>2013-10-02T10:43:00-03:00</updated><author><name>hernantz</name></author><id>tag:,2013-10-02:in-the-beginning-there-was-static-html.html</id><summary type="html">&lt;p&gt;In the beginning there was static HTML, and it scaled.
Now the are lots of frameworks and services running fiercely to dinamically generate HTML.
It's great, but if your site happens to get an increasing amount of users, then you hire an expert
that will tell you "best practices" to turn your dinamically generated HTML into a 
static one (mostly throw complex caching technique). Your site will scale again.
All the dynamicity is still there, but behind a caching wall.&lt;/p&gt;
&lt;p&gt;Cacheable content requires to don't change very often and to be generic for all visitors.
The problem is that your perfectly cacheable content has some dinamically changing pieces, like the 
welcome user22!. This could be fixed with some Javascript of course.&lt;/p&gt;
&lt;p&gt;Now, going a bit further. Im not downloading my phone apps every time I enter them, 
I just get the bits of data that make it seem alive and kicking. Do I need to download Youtube HTML 
every time I visit it? or would it make more sense to install the app and follow the 
pattern mentioned above?&lt;/p&gt;
&lt;p&gt;Makes me wonder if at some point it would be better to get back to roots and 
build HTML with a static site generator or force the site to be installed to be consumed.
Shall we compare the traffic generated from a chached website vs an installed version 
of the site (be it a native app or an installed webapp) to arrive to a conclusion.&lt;/p&gt;</summary><category term="cache"></category><category term="internet"></category></entry><entry><title>Sorry for the length of this post</title><link href="/sorry-for-the-length-of-this-post.html" rel="alternate"></link><updated>2013-08-30T22:56:00-03:00</updated><author><name>hernantz</name></author><id>tag:,2013-08-30:sorry-for-the-length-of-this-post.html</id><summary type="html">&lt;p&gt;I didn't have the time to make it shorter.&lt;/p&gt;
&lt;p&gt;In this blog, I do my best to get to the point. Quality over quantity.
Why write a thousand words if a picture says more than a thousand words? 
Why write six paragraphs if you can fit an introduction, main idea 
and conclusion in just three?&lt;/p&gt;
&lt;p&gt;Life is short, read this and move on.&lt;/p&gt;</summary><category term="personal"></category></entry><entry><title>Open tabs buffer overflow</title><link href="/open-tabs-buffer-overflow.html" rel="alternate"></link><updated>2013-08-21T22:56:00-03:00</updated><author><name>hernantz</name></author><id>tag:,2013-08-21:open-tabs-buffer-overflow.html</id><summary type="html">&lt;h2&gt;The interwebs and the power it holds&lt;/h2&gt;
&lt;p&gt;There is so much out there and just a click of distance.
Fun videos, new music, interesting articles, tutorials, blog posts, games.&lt;/p&gt;
&lt;p&gt;So now I have lots of open tabs that I would like to close some day but there is
always new content that keeps being added to my information processing buffer 
aka open tabs buffer.&lt;/p&gt;
&lt;h2&gt;WHY DO I EVEN CHECK REDDIT/HACKERNEWS?&lt;/h2&gt;
&lt;p&gt;Partly becouse It's addictive. Small dosis of information of stuff I like injected right to my brain. 
But mostly becouse, this way, I feel less guilty about procrastinating. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Bookmarks. That place where goes everything I will never read.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Ideas for surviving an open tabs buffer overflow.&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Triage" title="Triage mode"&gt;Triage mode&lt;/a&gt; for new content (this could be benefitial at some point, but until then...).&lt;/li&gt;
&lt;li&gt;Don't check for rss/newsletters/twitter/hackernews/reddit. You don't really need them, trust me.&lt;/li&gt;
&lt;li&gt;Fresh start. Don't reopen last tabs every session. 
  This will help you forget what wasn't important when you open the browser
  and read what is important before closing the browser.&lt;/li&gt;
&lt;li&gt;Limit browser tabs with a plugin.&lt;/li&gt;
&lt;li&gt;Use a read-it-later diggesting tool (like pocket), which also removes the comments and 
  ads cutter from your read.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="productivity"></category><category term="ideas"></category></entry><entry><title>Count database queries in Django</title><link href="/count-database-queries-in-django.html" rel="alternate"></link><updated>2013-07-06T10:08:00-03:00</updated><author><name>hernantz</name></author><id>tag:,2013-07-06:count-database-queries-in-django.html</id><summary type="html"></summary><category term="python"></category><category term="django"></category></entry><entry><title>Init</title><link href="/init.html" rel="alternate"></link><updated>2013-07-03T18:06:00-03:00</updated><author><name>hernantz</name></author><id>tag:,2013-07-03:init.html</id><summary type="html">&lt;p&gt;This is my not-sexy static new blog. It starts with a single post and a single
blog. I hope this is not one of those things I start and abandon.&lt;/p&gt;
&lt;p&gt;Why now? Becouse in the last weeks I felt the urge to write for myself. 
Knowing my thoughts will be publicly available forces me to think wisely, 
and arrive to better conclusions. 
Aditionally, until now didn't like any of the blogging platforms out there, 
but now with pelican, being able to craft my own posts with markdown and vim
is also part of the motivation.&lt;/p&gt;</summary><category term="pelican"></category><category term="personal"></category></entry><entry><title>/path/to/seniority</title><link href="/init.html" rel="alternate"></link><updated>2013-07-03T18:06:00-03:00</updated><author><name>hernantz</name></author><id>tag:,2013-07-03:init.html</id><summary type="html">&lt;h2&gt;Miguel Angel&lt;/h2&gt;
&lt;p&gt;Practice and learn from tightly scoped side-projects. You will:
&lt;em&gt; finish them (you have to, hence the tight scope)
&lt;/em&gt; explore fearlessly new ways of doing things
&lt;em&gt; learn a lot
&lt;/em&gt; practice current skills
Iterate.&lt;/p&gt;
&lt;h2&gt;Toyota&lt;/h2&gt;
&lt;p&gt;las piezas que duran 25 anos
en que momento mejorar?&lt;/p&gt;
&lt;h2&gt;Who is this senior after all?&lt;/h2&gt;
&lt;p&gt;relationship between quality/time
(Ejemplo de sketchs miguel angel y prototipos de toyota)
sos purista, no pierdas tiempo en detalles, no sos pragmatico.
En que momento mejorar?
Escribir tests, ui design, ux, etc. Tenes que tener ganas de ser mejor.
No sos senior en todo.&lt;/p&gt;
&lt;p&gt;A bad programmer will be a bad programmer whatever the framework, 
language or pattern happens to use.&lt;/p&gt;
&lt;p&gt;I mean, programming the job, not programming the hobby. I still like programming in my spare time, 
but I don't think I ever caught myself writing code for my employer and thinking "hey, I really enjoy this".
An annonymous internaut (http://pastebin.com/ed1pP9Ak)&lt;/p&gt;</summary><category term="personal"></category></entry><entry><title>Init</title><link href="/init.html" rel="alternate"></link><updated>2013-07-03T18:06:00-03:00</updated><author><name>hernantz</name></author><id>tag:,2013-07-03:init.html</id><summary type="html">&lt;p&gt;This is my not-sexy static new blog. It starts with a single post and a single
blog. I hope this is not one of those things I start and abandon.&lt;/p&gt;
&lt;p&gt;Why now? Becouse in the last weeks I felt the urge to write for myself. 
Knowing my thoughts will be publicly available forces me to think wisely, 
and arrive to better conclusions. 
Aditionally, until now didn't like any of the blogging platforms out there, 
but now with pelican, being able to craft my own posts with python and vim
is also part of the motivation.&lt;/p&gt;</summary><category term="pelican"></category><category term="personal"></category></entry><entry><title>The desintegrators</title><link href="/the-desintegrators.html" rel="alternate"></link><updated>2013-07-03T18:06:00-03:00</updated><author><name>hernantz</name></author><id>tag:,2013-07-03:the-desintegrators.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Anarchy's coming to town
A fiery invader
Burning it down to the ground
The Disintegrators&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="politics"></category><category term="personal"></category></entry></feed>